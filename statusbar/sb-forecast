#!/bin/sh

# Displays todays precipication chance (â˜”) and daily low (ðŸ¥¶) and high (ðŸŒž).
# Usually intended for the statusbar.
# Signal 5

# If we have internet, get a weather report from wttr.in and store it locally.
# You could set up a shell alias to view the full file in a pager in the
# terminal if desired. This function will only be run once a day when needed.
weatherreport="${XDG_DATA_HOME:-$HOME/.local/share}/weatherreport"
getforecast() { curl -sf "wttr.in/$LOCATION" > "$weatherreport" && sed -i '$ d' "$weatherreport" || exit 1 ;}

# Some very particular and terse stream manipulation. We get the maximum
# precipitation chance and the daily high and low from the downloaded file and
# display them with coresponding emojis.
showweather() { printf "%s" "$(sed '16q;d' "$weatherreport" |
	grep -wo "[0-9]*%" | sort -rn | sed "s/^/â˜”/g;1q" | tr -d '\n')"
 sed '13q;d' "$weatherreport" | grep -o "m\\([-+]\\)*[0-9]\\+" | sed 's/+//g' | sort -n -t 'm' -k 2n | sed -e 1b -e '$!d' | tr '\n|m' ' ' | awk '{print " ðŸ¥¶" $1 "Â°","ðŸŒž" $2 "Â°"}' ;}

case $BLOCK_BUTTON in
	1) setsid -f "$TERMINAL" -t Weather -e less -S "$weatherreport" ;;
	2) notify-send "ðŸŒ„Updating forecast..." && getforecast && showweather ;;
	# Maybe make different variables with awk on showweather so â˜”ðŸ¥¶ðŸŒž display info with description?
	3) notify-send --expire-time=3000 "ðŸŒˆ Weather module" "\<b>$(showweather)</b>
	- â˜”: Chance of rain/snow
	- ðŸ¥¶: Daily low
	- ðŸŒž: Daily high
	<i>- Left click for full forecast.</i>
	<i>- Middle click to update forecast.</i>" ;;
	6) "$TERMINAL" -e "$EDITOR" "$0" ;;
esac

# The test if our forcecast is updated to the day. If it isn't download a new
# weather report from wttr.in with the above function.
[ "$(stat -c %y "$weatherreport" 2>/dev/null | cut -d' ' -f1)" = "$(date '+%Y-%m-%d')" ] || getforecast

# Simple output, emoji and celsius
module=$(ts -nf curl "wttr.in/$LOCATION?format=3" | awk '{printf $3; printf $4}')
echo "$module"
#showweather
