#!/bin/sh

# Check if necessary programs are installed
#for prog in dmenu jq sxiv; do
#[ ! "$(which "$prog")" ] && echo "Please install $prog!" && exit 1
#done
# If notify-send is not installed, use echo as notifier
[ ! "$(which notify-send)" ] && notifier="echo" || notifier="notify-send"
#notifier="notify-send"

# reddit colors (dmenu flags only)
colors="-nb #FF5700 -nf #CEE3F8 -sb #FF8b60 -sf #FF4500"
# Default config file
configdir="${XDG_CONFIG_HOME:-$HOME/.config}"
# If subbreddit.txt does not exist, create it to prevent
# the program from not functioning properly. Sleep 1.5 so its redable if using dmenu
defaultsub="linuxmemes"
[ ! -f "$configdir/subreddit.txt" ] && notify-send "Creating $configdir/subreddit.txt" && sleep 1.5 && echo "$defaultsub" >> "$configdir/subreddit.txt"
# Default directory used to store the feed file and fetched images
cachedir="/tmp/redyt"
# If cachedir does not exist, create it
[ ! -d "$cachedir" ] && mkdir -p "$cachedir"

help_opt() {
	#Check if necessary programs are installed
	for prog in dmenu jq sxiv; do
	[ ! "$(which "$prog")" ] && echo "Please install $prog!"
	# How to not get which output
	done
	printf "Usage:\n"
	printf "\tredyt				asks for input in stdin using fzf\n"
	printf "\tredyt <search query>		takes input from the passed query using fzf\n"
	printf "\tredyt -o			Displays the posts (usefull if you don't want to download everthing)\n"
	printf "\tredyt -r			takes input and prompts using dmenu/rofi\n"
}

while getopts ":h :r o" opt; do
    case $opt in
	h)
	help_opt && exit 1	;;
	r)
	#subreddit=$(echo | dmenu -p "🔎 Search: ")
	subreddit=$(dmenu $colors -p "Select Subreddit r/" -i -l 10 < "$configdir/subreddit.txt" | cut -d\| -f1 | awk '{$1=$1;print}')
	#promptcmd="$guicmd -p Video:"
	[ -z "$query" ] && exit 1	;;
	o)
	format_reddit=1 ;;
	?)
	echo "Error! Invalid option!" && help_opt && exit 1	;;
    esac
done

# If no argument is passed
[ -z "$subreddit" ] && if [ -z "$*" ]; then
	# Ask the user to enter a subreddit
	#subreddit=$(dmenu $colors -p "Select Subreddit r/" -i -l 10 < "$configdir/subreddit.txt" | cut -d\| -f1 | awk '{$1=$1;print}')
	printf '%s\n' "Select Subreddit r/"
	subreddit=$(fzf  < "$configdir/subreddit.txt" | cut -d\| -f1 | awk '{$1=$1;print}')
	# If no subreddit was chosen, exit
	[ -z "$subreddit" ] && exit 1
# Otherwise assign the first argument to be
# the subreddit variable
else
	subreddit="$1"
fi

# Send a notification
$notifier "Redyt" "📩 Downloading your 🤡Memes\n⏳Queuing..."

# Download the subreddit feed, containing only the
# first 100 entries (limit), and store it inside
# cachedir/tmp.json
limit=100
tmp_json="$subreddit".json
user_agent="User-Agent: your bot 0.1"
#curl -sH "User-agent: 'your bot 0.1'" "https://www.reddit.com/r/$subreddit/hot.json?limit=$limit" \
curl -s -G "https://www.reddit.com/r/$subreddit/$sortby.json" -d raw_json=1 -d limit="${limit}" -H "$user_agent" \
	> "$cachedir"/"$tmp_json"


# Headers '-o' flag
#format_reddit_json () {
if [ $format_reddit ]; then
	{	jq -r '.data.children[].data | [
				.title,
				.preview.reddit_video_preview.fallback_url,
				.url_overridden_by_dest
			] | @tsv' < "$cachedir"/"$tmp_json"
		#<<-EOF
		#$*
		#EOF
	#	[ $? -eq 0 ] || exit 1
	} |
	while IFS=$tab_space read title url _;do
		[ -z "$url" ] && continue
		printf "%s%s\t%s\n" "$title" "$gap$gap$gap" "$url"
	done > "$cachedir"/posts_.TXT
#}
else
# Create a list of images
imgs=$(jq '.' < "$cachedir"/"$tmp_json" | grep url_overridden_by_dest | grep -Eo "http(s|)://.*(jpg|png|gif)\b" | sort -u)
fi

media_urls=$(printf "%s" "$fields" | dmenu -l 15 | \
	while IFS= read line; do
		printf "%s " "${line##*$tab_space}"
	done
)
[ -n "$media_urls" ] || exit 1

# If there are no images, exit
#[ -z "$imgs" ] && $notifier "Redyt" "sadly, there are no images for subreddit $subreddit, please try again later!😥" && exit 1

# Download images to $cachedir (use task spooler)
kill -37 "$(pidof dwmblocks)"	# task module bar
tsp -nf wget -P "$cachedir" $imgs

# Send a notification
$notifier "Redyt" "👍 Download Finished⌛, Enjoy <b>$subreddit</b> 😉"

# Display the images
sxiv -abp -s f "$cachedir"/*

# Once finished, remove all of the cached images
rm "${cachedir:?}"/*
