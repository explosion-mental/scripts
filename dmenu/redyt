#!/bin/sh

# Defaults
notifier="echo"
# reddit colors (dmenu)
colors="-nb #FF5700 -nf #CEE3F8 -sb #FF8b60 -sf #FF4500"
# Default config file
configdir="${XDG_CONFIG_HOME:-$HOME/.config}"
# If subbreddit.txt does not exist, create it to prevent
# the program from not functioning properly. Sleep 1.5 so its redable if using dmenu
defaultsub="linuxmemes"
[ ! -f "$configdir/subreddit.txt" ] && notify-send "Creating $configdir/subreddit.txt" && sleep 1.5 && echo "$defaultsub" >> "$configdir/subreddit.txt"
# Default directory used to store the feed file and fetched images
cachedir="/tmp/redyt"
# If cachedir does not exist, create it
[ ! -d "$cachedir" ] && mkdir -p "$cachedir"

help_opt() {
	#Check if necessary programs are installed
	for Dep in dmenu jq; do
		if ! command -v "$Dep" 1>/dev/null; then
			printf "%s not found. Please install it.\n\n" "$Dep"
		fi
	done
	printf "Usage:\n"
	printf "\tredyt				asks for input in stdin using fzf\n"
	printf "\tredyt <subreddit>		takes input from the passed query using fzf\n"
	printf "\tredyt -o			Displays the posts (usefull if you don't want to download everthing)\n"
	printf "\tredyt -r			takes input and prompts using dmenu/rofi\n"
}

while getopts ":h :r :o" opt; do
    case $opt in
	h)
	help_opt && exit 1	;;
	r)
	subreddit=$(dmenu $colors -p "Select Subreddit r/" -i -l 10 < "$configdir/subreddit.txt" | cut -d\| -f1 | awk '{$1=$1;print}')
	notifier="notify-send"
	[ -z "$subreddit" ] && exit 1	;;
	o)
	format_reddit=1 ;;
	?)
	echo "Error! Invalid option!" && help_opt && exit 1	;;
    esac
done
# Removes all the options that have been parsed by getopts from the parameters list, and so after that point, $1 will refer to the first non-option argument passed to the script.
shift "$((OPTIND-1))"

# If no argument is passed
[ -z "$subreddit" ] && if [ -z "$*" ]; then
	# Ask the user to enter/select a subreddit
	printf '%s\n' "Select Subreddit r/"
	subreddit=$(fzf  < "$configdir/subreddit.txt" | cut -d\| -f1 | awk '{$1=$1;print}')
	# If no subreddit was chosen, exit
	[ -z "$subreddit" ] && exit 1
# Otherwise assign the first argument to be
# the subreddit variable
else
	subreddit="$1"
fi

# Send a notification
$notifier "Redyt" "📩 Downloading your 🤡Memes\n⏳Queuing..."

# Download/stream the subreddit feed containing only the
# first 100 entries
limit=100
user_agent="User-Agent: your bot 0.1"

# Headers '-o' flag
gap="                                                            "
tab_space=$(printf '\t')

if [ $format_reddit ]; then
	curl -s -G "https://www.reddit.com/r/$subreddit/$sortby.json" -d raw_json=1 -d limit="${limit}" -H "$user_agent" | { jq -r '.data.children[].data | [
				.title,
				.preview.reddit_video_preview.fallback_url,
				.url_overridden_by_dest
			] | @tsv'
	} |
	while IFS=$tab_space read title url _;do
		[ -z "$url" ] && continue
		printf "%s%s\t%s\n" "$title" "$gap$gap$gap" "$url" >> "$cachedir"/posts_headers.TXT
	done
fi

if [ $format_reddit ]; then
    while true; do
	media_url="$(dmenu $colors -p "Select Post" -i -l 10 < "$cachedir"/posts_headers.TXT |
	while IFS= read line; do
		printf "%s " "${line##*$tab_space}"
	done)"
	[ -z "$media_url" ] && exit 1
	sxiv -abp -s f "$media_url"
	# if you don't have sxiv patches i guess uncomment this
	#wget -P "$cachedir" "$media_url" && sxiv -abp -s f "$cachedir"/*
	rm "${cachedir:?}"/*
    done
else
	imgs=$(curl -s -G "https://www.reddit.com/r/$subreddit/$sortby.json" -d raw_json=1 -d limit="${limit}" -H "$user_agent" | jq -r '.data.children[].data | .url_overridden_by_dest' | sort -u)

# If there are no images, exit
[ -z "$imgs" ] && $notifier "Redyt" "sadly, there are no images for subreddit $subreddit, please try again later!😥" && exit 1

# Download images to $cachedir (use task spooler)
kill -37 "$(pidof dwmblocks)"	# task module bar
#I rather download a lot of images on a directory
tsp -nf wget -P "$cachedir" $imgs

$notifier "Redyt" "👍 Download Finished⌛, Enjoy <b>$subreddit</b> 😉"

# Display the images
sxiv -abp -s f $imgs

# Once finished, remove all of the cached images
rm "${cachedir:?}"/*
fi
