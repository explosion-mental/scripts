#!/bin/sh

guicmd="fzf --header="
notifier="echo -e"
task="tsp -nf"
# reddit colors (dmenu)
colors="-nb #FF5700 -nf #CEE3F8 -sb #FF8b60 -sf #FF4500"
# config file
configdir="${XDG_CONFIG_HOME:-$HOME/.config}"
# If subbreddit.txt does not exist, create it to prevent the program from not
# functioning properly. Sleep 1.5 so its redable if using dmenu
defaultsub="linuxmemes"
[ ! -f "$configdir/subreddit.txt" ] && "$notifier" "Creating $configdir/subreddit.txt" && sleep 1.5 && echo "$defaultsub" >> "$configdir/subreddit.txt"
# Cache for images
cachedir="/tmp/redyt"
# If cachedir does not exist, create it
[ ! -d "$cachedir" ] && mkdir -p "$cachedir"
#############
# functions #
#############

help_opt() {
	#Check if necessary programs are installed
	for Dep in dmenu jq; do
		if ! command -v "$Dep" 1>/dev/null; then
			printf "%s not found. Please install it.\n\n" "$Dep"
		fi
	done
	printf "Usage:\n"
	printf "\tredyt				Asks for input in stdin using fzf\n"
	printf "\tredyt <subreddit>		Takes input from the passed query using fzf\n"
	printf "\tredyt -r			Prompts using dmenu/rofi\n"
	printf "\tredyt -o			Displays posts/titles/headers (usefull if you don't want to download everthing)\n"
	printf "\tredyt -h			Shows this :)\n"
}
while getopts ":h :r :o" opt; do
    case $opt in
	h)
	help_opt && exit 1	;;
	r)
	guicmd="dmenu $colors -i -l 10 -p "
	subreddit="$($guicmd"Select Subreddit r/" < "$configdir/subreddit.txt" | cut -d\| -f1 | awk '{$1=$1;print}')"
	notifier=notify-send
	[ -z "$subreddit" ] && exit 1	;;
	o)
	format_reddit=1 ;;
	?)
	echo "Error! Invalid option!" && help_opt && exit 1	;;
    esac
done
# Removes all the options that have been parsed by getopts from the parameters
# list, and so after that point, $1 will refer to the first non-option argument
# passed to the script.
shift "$((OPTIND-1))"

# If no argument is passed
[ -z "$subreddit" ] && if [ -z "$*" ]; then
	# Ask the user to enter/select a subreddit
	printf '%s\n' "Select Subreddit r/"
	# Extra step so anything that doesn't match on fzf would still be
	# stored
	print_query="$($guicmd --print-query < "$configdir/subreddit.txt")"
	query_head="$(echo "$print_query" | head -1)"
	[ -z "$query_head" ] && query_head="$(echo "$print_query" | tail -1)"
	subreddit="$(echo "$query_head" | cut -d\| -f1 | awk '{$1=$1;print}')"
	# If no subreddit was chosen, exit
	[ -z "$subreddit" ] && exit 1
# Otherwise assign the first argument to be the subreddit variable
else
	subreddit="$1"
fi

# notification
[ -z $format_reddit ] && $notifier "Redyt" "üì© Downloading your ü§°Memes\n‚è≥Queuing $subreddit..."
[ $format_reddit ] && $notifier "Redyt" "üì© Looking for posts on $subreddit"

# Download/stream the subreddit feed containing only the first 100 entries
limit=100
user_agent="User-Agent: your bot 0.1"

# Headers '-o' flag
gap="                                                            " # Big space so url are non-visible
tab_space=$(printf '\t')

if [ $format_reddit ]; then
	curl -s -G "https://www.reddit.com/r/$subreddit/$sortby.json" -d raw_json=1 -d limit="${limit}" -H "$user_agent" | { jq -r '.data.children[].data | [
				.title,
				.preview.reddit_video_preview.fallback_url,
				.url_overridden_by_dest
			] | @tsv'
	} |
	while IFS=$tab_space read title url _;do
		[ -z "$url" ] && continue
		printf "%s%s\t%s\n" "$title" "$gap$gap$gap" "$url" >> "$cachedir"/posts_headers.TXT
	done
fi

if [ $format_reddit ]; then
	while true; do	#prompts until you esc
		media_url="$($guicmd"Select Post" < "$cachedir"/posts_headers.TXT |
		while IFS= read line; do
			printf "%s" "${line##*$tab_space}"
		done)"
		[ -z "$media_url" ] && exit 1
		case "$media_url" in
			*png|*jpg|*jpe|*jpeg|*JPG|*gif|*webp)
			# Uncomment if you have sxiv patched with libcurl
			#sxiv -abp -s f "$media_url"
			curl -sL "$media_url" > "$cachedir"/"$(printf '%s' "$media_url" | sed "s/.*\///;s/%20/ /g")" && sxiv -abp -s f "$cachedir"/"$(printf '%s' "$media_url" | sed "s/.*\///;s/%20/ /g")"

			#rm "${cachedir:?}"/*.gif
			# Delete all jpg or png or gif or jpeg
			find "$cachedir" -maxdepth 1 -type f \( -name \*jpg -o -name \*png -o -name \*gif -o -name \*jpeg \) -delete
			;;
	*mkv|*webm|*mp4|*youtube.com/watch*|*youtube.com/playlist*|*youtu.be*|*hooktube.com*|*bitchute.com*)
			mpv "$media_url"
			;;
			*) # anything else with mpv. Does someone on
			   # reddit share *pdf|*cvs...?
			mpv --prefetch-playlist=yes \
			--image-display-duration=5 $media_urls ;;
		esac
    	done
	rm "$cachedir"/posts_headers.TXT
else
# See all images of subreddit
	imgs=$(curl -s -G "https://www.reddit.com/r/$subreddit/$sortby.json" -d raw_json=1 -d limit="${limit}" -H "$user_agent" | jq -r '.data.children[].data | .url_overridden_by_dest' | sort -u)
	[ -z "$imgs" ] && $notifier "Redyt" "sadly, there are no images for subreddit $subreddit, please try again later!üò•" && exit 1

# Download images to $cachedir (use task spooler)
kill -37 "$(pidof dwmblocks)"	# task module bar
$task wget -P "$cachedir" $imgs

$notifier "Redyt" "üëç Download Finished‚åõ, Enjoy <b>$subreddit</b> üòâ"
# Display the images and once finished, remove cache
sxiv -abp -s f "$cachedir"/*
#uncomment if you have sxiv patched with libcurl
#sxiv -abp -s f $imgs
rm "${cachedir:?}"/*

fi
