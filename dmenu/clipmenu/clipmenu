#!/usr/bin/env bash

#: "${CM_LAUNCHER=dmenu}"
: "${CM_DIR="${XDG_RUNTIME_DIR-"${TMPDIR-/tmp}"}"}"
: "${CM_HISTLENGTH=8}"

major_version=6

shopt -s nullglob

cache_dir=$CM_DIR/clipmenu.$major_version.$USER
cache_file=$cache_dir/line_cache

if [[ $1 == --help ]]; then
    cat << 'EOF'
clipmenu is a simple clipboard manager using dmenu and xclip (My fork). Launch this
when you want to select a clip.

All arguments are passed through to dmenu itself.

Environment variables:

- $CM_DIR: specify the base directory to store the cache dir in (default: $XDG_RUNTIME_DIR, $TMPDIR, or /tmp)
- $CM_HISTLENGTH: specify the number of lines to show in dmenu/rofi (default: 8)
- $CM_LAUNCHER: specify a dmenu-compatible launcher (default: dmenu)
- $CM_OUTPUT_CLIP: if set, output clip selection to stdout
EOF
    exit 0
fi

launcher_args=(-l "${CM_HISTLENGTH}")

list_clips() {
    LC_ALL=C sort -rnk 1 < "$cache_file" | cut -d' ' -f2- | awk '!seen[$0]++'
}

#tab_filter() {
#	tab=$(printf '\t') # or tab='   ' # (a real tab character)
#	case $outline in
#	  ("${tab}"*)  tr '\t' '\0'
#	esac
#}

#chosen_line=$(list_clips | sed 's/^\t*//' | uniq |dmenu "${launcher_args[@]}" "$@")
chosen_line=$(list_clips | uniq | dmenu "${launcher_args[@]}" "$@")


[[ $chosen_line ]] || exit 1
file=$cache_dir/$(cksum <<< "$chosen_line")
[[ -f "$file" ]] || exit 2

for selection in clipboard primary; do
	xclip -sel "$selection" < "$file"
done

(( CM_OUTPUT_CLIP )) && cat "$file"
