#!/bin/sh

# dependencies: mpv youtube-dl fzf rofi/dmenu sxiv(not mandatory)
#for prog in mpv youtube-dl fzf dmenu; do
#[ ! "$(which "$prog")" ] && echo "Please install $prog!" && exit 1
#done

# Variables
defcmd="fzf"
#guicmd="rofi -dmenu -i" #uncomment next line for dmenu
guicmd="dmenu -nb black -nf white -sb #E62117 -sf black -i -l 15"
promptcmd="$defcmd"
user_agent='Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:53.0) Gecko/20100101 Firefox/53.0'
#user_agent='your bot 0.1'
cachedir="/tmp/redyt"	#for images and description
task=tsp

# Help
help_opt() {
	printf "Usage:\n"
	printf "\ttermyt				asks for input in stdin using fzf\n"
	printf "\ttermyt <search query>		takes input from the passed query using fzf\n"
	printf "\ttermyt -r			takes input and prompts using dmenu/rofi\n"
}
# Handle options
while getopts ":h :g :r :R" opt; do
#case "$1" in
    case $opt in
	h)
	help_opt && exit 1	;;
	r)
	query=$(echo | $guicmd -p "üîé Search: ")
	promptcmd="$guicmd -p Video:"
	[ -z "$query" ] && exit 1	;;
	#notifier=notify-send	;;
	R)
	status001=1
	[ "$OPTARG" = " " ] && help_opt && exit 1
	[ "$OPTARG" = "max" ] && res="maxresdefault.jpg"
	[ "$OPTARG" = "hq"  ] && res="hqdefault.jpg"
	[ "$OPTARG" = "mid" ] && res="mqdefault.jpg"
	[ "$OPTARG" = "low" ] && res="sddefault.jpg"	;;
	#g) #Get description with youtube-dl
	#description=1
	#;;
	?)
	echo "Error! Invalid option!" && help_opt && exit 1	;;
	#*)
	#query="$*"	;;
    esac
done
# Removes all the options that have been parsed by getopts from the parameters list, and so after that point, $1 will refer to the first non-option argument passed to the script.
shift "$((OPTIND-1))"

[ -z "$query" ] && if [ -z "$*" ]; then
	printf '%s' "ÔÄÇ Search: "
	read -r query
else
#[ -z "$*" ] && echo -n "ÔÄÇ Search: " && read -r query ||
	query="$*"
	printf '%s' "Searching..."
fi
[ -z "$query" ] && exit

# sanitise the query
query=$(echo "$query" | sed \
	-e 's|+|%2B|g'\
	-e 's|#|%23|g'\
	-e 's|&|%26|g'\
	-e 's| |+|g')
[ -z "$query" ] && exit

#fetching () { Function?
# fetch the results with the $query and
# delete all escaped characters

# Why you wanna tell google you use linux?
response="$(curl "https://www.youtube.com/results" -s -G --user-agent "$user_agent" --data-urlencode "search_query=$query" -H 'authority: www.youtube.com' -H 'accept-language: en-US,en;q=0.9' -L --compressed)"
#response=$(curl -Gs --compressed "https://www.youtube.com/results?search_query=$query" --user-agent "$user_agent" | sed 's|\\.||g')
#response="$(curl -s "https://www.youtube.com/results?search_query=$query" | sed 's|\\.||g')"

# if unable to fetch the youtube results page, inform and exit (posix?)
#if ! printf '%s' "$response" | grep -q "script" ; then echo "unable to fetch yt"; exit 1; fi
[ -z "$response" ] && print_error "\033[31mERROR[#02]: Couldn't find data on site.\033[0m\n" && exit 1
#if ! grep -q "script" <<< "$response"; then echo "unable to fetch yt"; exit 1; fi

# regex expression to match video and playlist entries from yt result page
vgrep='"videoRenderer":{"videoId":"\K.{11}".+?"text":".+?[^\\](?=")'
pgrep='"playlistRenderer":{"playlistId":"\K.{34}?","title":{"simpleText":".+?[^\"](?=")'
# grep the id and title
# return them in format id (type) title
getresults() {
	printf '%s' "$response" | grep -oP "$1" |\
	  #grep -oP "$1" <<< "$response"
		awk -F\" -v p="$2" '{ print $1 "\t" p " " $NF}'
}
# get the list of videos/playlists and their ids in videoids and playlistids
videoids=$(getresults "$vgrep")
playlistids=$(getresults "$pgrep" "(playlist)")
# if there are playlists or videos, append them to list
[ -n "$playlistids" ] && ids="$playlistids\n"
[ -n "$videoids" ] && ids="$ids$videoids"
# url prefix for videos and playlists
videolink="https://youtu.be/"
playlink="https://youtube.com/playlist?list="

# OPTIONAL: Display thumbnail on sxiv
[ ! -d "$cachedir" ] && mkdir -p "$cachedir"
img="http://img.youtube.com/vi"

#max="maxresdefault.jpg"
#HQ="hqdefault.jpg"
#mid="mqdefault.jpg"
#low="sddefault.jpg"

# only one thumbnail, the selected one, before watching the video was the first use of this
#thumb() {
	#curl -sL "$img/$id/$res" > "$cachedir/$(echo "$choice").jpg" && sxiv -abp -s f "$cachedir/$(echo "$choice").jpg"  >/dev/null 2>&1 && rm "${cachedir:?}"/* ; echo "$ids" > ~/yt
	#}

# 30 thumbnails
thumball() {
	echo "$ids" | awk '{print $1}' | sed "s,^,&$img/,;s,$,&/$res," > "$cachedir"/thumb.txt
	while read -r URL; do
		var=$((var + 1))
	$task -nf curl -L "$URL" > "$cachedir"/"$(printf '%s' "$ids" | sed "${var}q;d" | cut -d'	' -f2 | iconv -cf UTF-8 -t ASCII//TRANSLIT | tr -d '[:punct:]' | tr ' ' '_' | sed "s/-\+/-/g;s/\(^-\|-\$\)//g").jpg";
	done < $cachedir/thumb.txt
	notify-send "Finished‚åõ" && sxiv -bpt -s f $cachedir/* ; rm "${cachedir:?}"/*
}

#		curl -sL "$URL" > "$cachedir/$(echo "$ids" | sed "${var}q;d" | awk '{print $1}').jpg";
# The only problem here is that images don't appear in the "algorithm" order but does it really matter?
#		curl -sL "$URL" > "$cachedir/$(echo -e "$ids" | tac | sed "${var}q;d" | cut -d'	' -f2).jpg";

# prompt the results to user infinitely until they exit (escape)
# while true; do # I don't need to search infinitely

# Making this a function because I will be repeating this
choose() {
	clear
	echo "Choose Video/Playlist to play: "
	choice=$(printf '%s' "$ids" | cut -d'	' -f2 | $promptcmd) # dont show id
	#if [ -z "$choice" ]; then exit; fi	# if esc-ed then exit
	[ -z "$choice" ] && exit 		# if esc-ed then exit
	id=$(printf '%s' "$ids" | grep -Fwm1 "$choice" | cut -d'	' -f1) # get id of choice
	printf '%s' "$choice\t($id)"
}

#choose_sxiv() {
##	choice=$(echo -e "$ids" | cut -d'	' -f2 | $promptcmd) # dont show id
#	#if [ -z "$choice" ]; then exit; fi	# if esc-ed then exit
#	choice=$(sxiv -bpt -s f "$cachedir"/*)
#	[ -z "$choice" ] && exit 		# if esc-ed then exit
#	id=$(echo -e "$ids" | grep -Fwm1 "$choice" | cut -d'	' -f1) # get id of choice
#	rm $cachedir/*
#}

#[ -n $description ] && youtube-dl "https://www.youtube.com/results?search_query=$query" --get-description >> "$cachedir"/description.TXT && setsid -f "$TERMINAL" -e less "$cachedir"/description.TXT
[ -z "$status001" ] && choose
[ -n "$status001" ] && notify-send "Youtubeüìº" "Fetching all thumbnails\nPlease wait‚è≥..." && thumball && choose #&& dmeurl "$videolink$id"

case $id in
# the 'choice' variable as a second argument is to display it on a notification with dmenurl
		# 11 digit id = video
	???????????) dmenurl "$videolink$id" "$(echo "$choice" | sed 's/ *//')" ;;
	#???????????) dmenurl "$videolink$id" "${choice// */}" ;;
		# 34 digit id = playlist
	??????????????????????????????????) dmenurl "$playlink$id" "$(echo "$choice" | sed 's/ *//')" ;;
	#??????????????????????????????????) dmenurl "$playlink$id" "${choice// *//}" ;;
		*) exit ;;
esac
