#!/bin/sh

# Interact with your clipboard contents
# Dep: xclip, dmenu

# Edit below to fit your taste
cachedir=/tmp

menu() {
	printf "1.  [URL]   Save as bookmark📑\n"
	printf "2.  [URL]   Open on Browser🦊\n"
	printf "3.  [URL]   Download file📥\n"
	printf "4.  [URL]   Download yt audio🎧\n"
	printf "5.  [URL]   Shorten url✂️\n"
	printf "6.  [URL]   Play videos/audio in mpv🤟🎥\n"
	printf "7.  [URL]   Open link on sxiv\n"
	printf "8.  [Text]  Search on....🦆\n"
	printf "9.  [Text]  Convert text to QR image\n"
       printf "10. [Text]  View on VIM\n"
       printf "11. [Text]  Put something on your clipboard\n"
       printf "12. [Text]  Upload to 0x0.st\n"
       printf "13. [Text]  Put clip text into a notification\n"
       printf "14. [Image] Save clipboard image🔖\n"
       printf "15. [Image] Upload to 0x0.st\n"
       printf "16. [Shell] Run shell command on st🤖\n"
       printf "17. [GOD]   Save godwords on your clipboard\n"
       printf "18. [I'd just like to interject for a moment.] What you’re referring to as Linux, is in fact, GNU/Linux, or as I’ve recently taken to calling it, GNU plus Linux. Linux is not an operating system\n"
}
spell_failed() { notify-send "Clipmagick" "Error 404🤖" ; exit 1 ;}

[ ! -d "$cachedir" ] && mkdir -p "$cachedir"

# FORMATING
# remove tabs and new lines
prompt=$(xclip -o -sel c | tr -d '\t' | tr -d '\n')

# if the selected clipboard text is bigger than 30 chars, replaze all other
# after the first 30 chars with '...' (improves load time)
[ "${#prompt}" -gt 30 ] && prompt="${prompt%"${prompt#?????????????????????????}"}"..."${prompt#"${prompt%???????}"}"
choice=$(menu | dmenu -p "$prompt" -i -l 20 | cut -d'.' -f1)
cbtext=$(xclip -o -selection clipboard)

case $choice in
    1)	#Save as bookmark📑
        bookmenu "$cbtext"
	;;
    2)	#Open on Browser🦊
        $BROWSER "$cbtext" &
	;;
    3)	#Download file📥
        qndl "$cbtext" || spell_failed
	;;
    4)	#Download yt audio🎧
	if echo "$cbtext" | grep -qs "playlist"; then
		ytdldir=$(: | dmenu -p "Directory playlist name:")
	else
		ytdldir=""
	fi
	youtube-dl "$cbtext" --add-metadata --extract-audio --ignore-errors --format bestaudio/best --continue --exec "mv {} $HOME/$ytdldir"
	notify-send "⏳ Downloading audio..." "<i><u>'$(basename "$1")'</i></u>..."
	;;
    5)	#Shorten url✂️
        notify-send "Cutting...✂️"
        output=$(curl -s -F"shorten=$cbtext" 0x0.st)
        [ "$output" = "Segmentation fault" ] && spell_failed
        echo "$output" | xclip -sel c &&
        notify-send "Shorten Link is in Clipboard" "<i>$output</i>"
	;;
    6)	#Play videos/audio in mpv
	setsid -f mpv -quiet --title="Music" "$cbtext" || spell_failed
	notify-send "🎥 Opening video..."
	;;
    7)	#Open link on sxiv
	sxiv "$cbtext"
	;;
    8)	#Search on....🦆
	$BROWSER "https://duckduckgo.com/?q=$cbtext"
	;;
    9)	#Convert text to QR image
	qrencode -o $cachedir/tmpqrcode.png "$cbtext" && \
	sxiv -bp -s f $cachedir/tmpqrcode.png ; rm $cachedir/tmpqrcode.png
	;;
    10)	#View on VIM
	#still doesn't work..
	setsid -f st -e printf '%s' "$cbtext" | nvim
	;; #|| spell_failed	;;
    11)	#Put something on your clipboard
    	printf | dmenu | xclip -i -sel c
	;;
    12)	#Upload to 0x0.st
    	up_file=$cachedir/tmpclipboard
	xclip -sel clipboard > $up_file
	output=$(curl --silent -F "file=@$up_file" https://0x0.st) # | xclip -sel c
        [ "$output" = "Segmentation fault" ] && spell_failed
        echo "$output" | xclip -sel c && \
	notify-send "URL copied to your clipboard" "<i>$output</i>"
	rm $up_file
	;;
    13)	#Put clipboard text into a transient window (notification)
	notify-send -u critical "$cbtext"
	;;
    14)	#Save clipboard image🔖
    	d=$(date +'%d-%m_%I_%M_%S')
        { xclip -sel clipboard -t image/png -o > "$HOME"/clipboard"$d".png && \ sxiv "$HOME"/clipboard"$d".png ;} || spell_failed
	;;
    15)	#Upload to 0x0.st
    	up_file=$cachedir/tmpclipboard.png
	xclip -sel clipboard -t image/png -o > $up_file
	output=$(curl --silent -F "file=@$up_file" https://0x0.st) # | xclip -sel c
        [ "$output" = "Segmentation fault" ] && spell_failed
        echo "$output" | xclip -sel c && \
	notify-send "URL copied to your clipboard" "<i>$output</i>"
	rm $up_file
	;;
    16)	#Run shell command on st
	setsid -f st -e "$cbtext" #|| spell_failel #;;
	read -r _
	;;
    17)	#Save godwords on your clipboard
	godwords | xclip -sel c
	;;
    18)	# GNU/Linux!
echo "I'd just like to interject for a moment. What you’re referring to as
Linux, is in fact, GNU/Linux, or as I’ve recently taken to calling it, GNU plus
Linux. Linux is not an operating system unto itself, but rather another free
component of a fully functioning GNU system made useful by the GNU corelibs,
shell utilities and vital system components comprising a full OS as defined by
POSIX.

Many computer users run a modified version of the GNU system every day, without
realizing it. Through a peculiar turn of events, the version of GNU which is
widely used today is often called “Linux”, and many of its users are not
aware that it is basically the GNU system, developed by the GNU Project. There
really is a Linux, and these people are using it, but it is just a part of the
system they use.

Linux is the kernel: the program in the system that allocates the machine’s
resources to the other programs that you run. The kernel is an essential part
of an operating system, but useless by itself; it can only function in the
context of a complete operating system. Linux is normally used in combination
with the GNU operating system: the whole system is basically GNU with Linux
added, or GNU/Linux. All the so-called “Linux” distributions are really
distributions of GNU/Linux." | xclip -sel c ;;
esac
